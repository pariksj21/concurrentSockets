name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  BUN_VERSION: '1.0.0'

jobs:
  # Build and Test Job
  build-and-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: ${{ env.BUN_VERSION }}
        
    - name: Install dependencies
      working-directory: ./app
      run: bun install --frozen-lockfile
      
    - name: Lint code
      working-directory: ./app
      run: |
        bun run lint || echo "No lint script configured"
        
    - name: Run tests
      working-directory: ./app
      run: bun test
      
    - name: Build application
      working-directory: ./app
      run: bun run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ matrix.os }}
        path: app/dist/
        retention-days: 7

  # Docker Build Job
  docker-build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    needs: [build-and-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Docker (macOS)
      if: runner.os == 'macOS'
      run: |
        # Check if Docker is already running
        if ! docker info > /dev/null 2>&1; then
          echo "Docker is not running. Please ensure Docker Desktop is installed and running on your macOS runner."
          # Try to start Docker Desktop if it's installed
          if [ -f "/Applications/Docker.app/Contents/MacOS/Docker" ]; then
            echo "Starting Docker Desktop..."
            open -a Docker
            # Wait for Docker to start
            echo "Waiting for Docker to start..."
            timeout 60 bash -c 'until docker info > /dev/null 2>&1; do sleep 2; done'
          else
            echo "Docker Desktop not found. Please install Docker Desktop for macOS."
            exit 1
          fi
        fi
        echo "Docker is running on macOS"
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      working-directory: .
      run: |
        docker build -f docker/app/Dockerfile -t websocket-server:${{ github.sha }} ./app
        docker build -f docker/app/Dockerfile -t websocket-server:latest ./app
        
    - name: Test Docker image
      run: |
        # Start container for testing
        docker run -d --name test-container -p 3001:3001 websocket-server:${{ github.sha }}
        
        # Wait for container to start
        sleep 10
        
        # Cross-platform health check with timeout
        wait_for_health() {
          local max_attempts=30
          local attempt=0
          
          while [ $attempt -lt $max_attempts ]; do
            if curl -f http://localhost:3001/health > /dev/null 2>&1; then
              echo "Health endpoint is ready!"
              return 0
            fi
            echo "Health check attempt $((attempt + 1))/$max_attempts failed, retrying..."
            sleep 1
            attempt=$((attempt + 1))
          done
          
          echo "Health endpoint failed to become ready after $max_attempts attempts"
          return 1
        }
        
        # Test health endpoint
        wait_for_health
        
        # Test readiness endpoint
        curl -f http://localhost:3001/readyz || echo "Readiness check may fail during startup"
        
        # Test liveness endpoint
        curl -f http://localhost:3001/healthz
        
        # Test metrics endpoint
        curl -f http://localhost:3001/metrics | grep -q "websocket_connections_total"
        
        # Cleanup
        docker stop test-container
        docker rm test-container
        
    - name: Save Docker image
      if: github.ref == 'refs/heads/main'
      run: |
        docker save websocket-server:${{ github.sha }} | gzip > websocket-server.tar.gz
        
    - name: Upload Docker image artifact
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: docker-image-${{ matrix.os }}
        path: websocket-server.tar.gz
        retention-days: 7

  # Monitor and Test Job
  monitor-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    needs: [docker-build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Docker (macOS)
      if: runner.os == 'macOS'
      run: |
        # Check if Docker is already running
        if ! docker info > /dev/null 2>&1; then
          echo "Docker is not running. Please ensure Docker Desktop is installed and running on your macOS runner."
          # Try to start Docker Desktop if it's installed
          if [ -f "/Applications/Docker.app/Contents/MacOS/Docker" ]; then
            echo "Starting Docker Desktop..."
            open -a Docker
            # Wait for Docker to start
            echo "Waiting for Docker to start..."
            timeout 60 bash -c 'until docker info > /dev/null 2>&1; do sleep 2; done'
          else
            echo "Docker Desktop not found. Please install Docker Desktop for macOS."
            exit 1
          fi
        fi
        echo "Docker is running on macOS"
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image for monitoring
      working-directory: .
      run: |
        docker build -f docker/app/Dockerfile -t websocket-server:test ./app
        
    - name: Start services for monitoring
      run: |
        # Create Docker network for inter-container communication
        docker network create test-network
        
        # Start Redis (needed for full functionality)
        docker run -d --name redis-test --network test-network -p 6379:6379 redis:7-alpine
        
        # Start WebSocket server
        docker run -d --name websocket-test --network test-network -p 3001:3001 \
          -e REDIS_URL=redis://redis-test:6379 \
          websocket-server:test
        
        # Wait for services to be ready
        echo "Waiting for services to start..."
        sleep 15
        
        # Verify services are running
        docker ps
        
    - name: Wait for service readiness
      run: |
        echo "Waiting for WebSocket server to be ready..."
        
        # Cross-platform timeout function
        wait_for_service() {
          local max_attempts=30
          local attempt=0
          
          while [ $attempt -lt $max_attempts ]; do
            if curl -f http://localhost:3001/health > /dev/null 2>&1; then
              echo "Service is ready!"
              return 0
            fi
            echo "Attempt $((attempt + 1))/$max_attempts failed, retrying in 2 seconds..."
            sleep 2
            attempt=$((attempt + 1))
          done
          
          echo "Service failed to become ready after $max_attempts attempts"
          return 1
        }
        
        wait_for_service
        
        echo "Testing endpoints..."
        curl -f http://localhost:3001/healthz || echo "Liveness check failed"
        curl -f http://localhost:3001/readyz || echo "Readiness check may fail initially"
        curl -f http://localhost:3001/metrics | head -10 || echo "Metrics endpoint failed"
        
    - name: Run monitor script for 20 seconds
      run: |
        echo "Starting monitor script for 20 seconds..."
        
        # Make monitor script executable
        chmod +x scripts/monitor.sh
        
        # Cross-platform timeout for monitor script
        if [[ "$RUNNER_OS" == "Linux" ]]; then
          # Linux has timeout command
          timeout 20s ./scripts/monitor.sh > monitor_output.log 2>&1 &
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
          # macOS might not have timeout, use gtimeout if available or manual timeout
          if command -v gtimeout > /dev/null 2>&1; then
            gtimeout 20s ./scripts/monitor.sh > monitor_output.log 2>&1 &
          else
            # Manual timeout implementation
            ./scripts/monitor.sh > monitor_output.log 2>&1 &
            MONITOR_PID=$!
            # Kill the process after 20 seconds
            (sleep 20 && kill $MONITOR_PID 2>/dev/null) &
          fi
        else
          # Fallback for other systems
          ./scripts/monitor.sh > monitor_output.log 2>&1 &
          MONITOR_PID=$!
          (sleep 20 && kill $MONITOR_PID 2>/dev/null) &
        fi
        
        # Wait for monitor to run for 20 seconds
        sleep 20
        
        # Show monitor output
        echo "=== Monitor Script Output ==="
        cat monitor_output.log || echo "No monitor output available"
        
        # Generate some test traffic to have something to monitor
        echo "=== Generating test traffic ==="
        for i in {1..10}; do
          curl -s http://localhost:3001/health > /dev/null || true
          curl -s http://localhost:3001/metrics > /dev/null || true
          sleep 1
        done
        
    - name: Collect container logs
      if: always()
      run: |
        echo "=== Collecting container logs ==="
        mkdir -p logs
        
        # Get WebSocket server logs
        docker logs websocket-test > logs/websocket-server.log 2>&1 || echo "Failed to get websocket logs"
        
        # Get Redis logs
        docker logs redis-test > logs/redis.log 2>&1 || echo "Failed to get redis logs"
        
        # Get system info
        docker ps > logs/containers.log 2>&1 || echo "Failed to get container info"
        
        # Copy monitor output
        cp monitor_output.log logs/ || echo "No monitor output to copy"
        
        echo "=== Log files created ==="
        ls -la logs/
        
    - name: Archive logs and artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: monitor-logs-and-artifacts-${{ matrix.os }}
        path: |
          logs/
          monitor_output.log
        retention-days: 7
        
    - name: Cleanup containers
      if: always()
      run: |
        echo "Cleaning up containers..."
        docker stop websocket-test redis-test || true
        docker rm websocket-test redis-test || true
        docker network rm test-network || true

  # Deploy Job (only on main branch)
  deploy:
    runs-on: ubuntu-latest
    needs: [build-and-test, docker-build, monitor-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download Docker image (Ubuntu)
      uses: actions/download-artifact@v4
      with:
        name: docker-image-ubuntu-latest
        
    - name: Load Docker image
      run: |
        docker load < websocket-server.tar.gz
        
    # This is where you would add your deployment steps
    # Examples for different deployment targets:
    
    - name: Deploy to staging (example)
      if: github.ref == 'refs/heads/develop'
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        
    - name: Deploy to production (example)
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Examples:
        # - Docker registry push
        # - Kubernetes deployment
        # - Docker Swarm deployment
        # - Cloud provider deployment
        
    - name: Notify deployment
      if: always()
      run: |
        echo "Deployment completed with status: ${{ job.status }}"
        # Add notification logic here (Slack, email, etc.)

  # Cleanup Job
  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy, monitor-test]
    if: always()
    
    steps:
    - name: Cleanup artifacts
      run: |
        echo "Cleaning up temporary artifacts..."
        # Add any cleanup logic here 