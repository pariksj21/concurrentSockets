name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  BUN_VERSION: '1.0.0'

jobs:
  # Build and Test Job
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: ${{ env.BUN_VERSION }}
        
    - name: Install dependencies
      working-directory: ./app
      run: bun install --frozen-lockfile
      
    - name: Lint code
      working-directory: ./app
      run: |
        bun run lint || echo "No lint script configured"
        
    - name: Build application
      working-directory: ./app
      run: bun run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: app/dist/
        retention-days: 7

  # Docker Build Job
  docker-build:
    runs-on: ubuntu-latest
    needs: [build-and-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      working-directory: .
      run: |
        docker build -f docker/app/Dockerfile -t websocket-server:${{ github.sha }} ./app
        docker build -f docker/app/Dockerfile -t websocket-server:latest ./app
        
    - name: Test Docker image
      run: |
        # Start container for testing
        docker run -d --name test-container -p 3001:3001 websocket-server:${{ github.sha }}
        
        # Wait for container to start
        sleep 10
        
        # Test health endpoint
        timeout 30 bash -c 'until curl -f http://localhost:3001/health; do sleep 1; done'
        
        # Test readiness endpoint
        curl -f http://localhost:3001/readyz || echo "Readiness check may fail during startup"
        
        # Test liveness endpoint
        curl -f http://localhost:3001/healthz
        
        # Test metrics endpoint
        curl -f http://localhost:3001/metrics | grep -q "websocket_connections_total"
        
        # Cleanup
        docker stop test-container
        docker rm test-container
        
    - name: Save Docker image
      if: github.ref == 'refs/heads/main'
      run: |
        docker save websocket-server:${{ github.sha }} | gzip > websocket-server.tar.gz
        
    - name: Upload Docker image artifact
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: docker-image
        path: websocket-server.tar.gz
        retention-days: 7

  # Deploy Job (only on main branch)
  deploy:
    runs-on: ubuntu-latest
    needs: [build-and-test, docker-build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download Docker image
      uses: actions/download-artifact@v4
      with:
        name: docker-image
        
    - name: Load Docker image
      run: |
        docker load < websocket-server.tar.gz
        
    # This is where you would add your deployment steps
    # Examples for different deployment targets:
    
    - name: Deploy to staging (example)
      if: github.ref == 'refs/heads/develop'
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        
    - name: Deploy to production (example)
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        # Examples:
        # - Docker registry push
        # - Kubernetes deployment
        # - Docker Swarm deployment
        # - Cloud provider deployment
        
    - name: Notify deployment
      if: always()
      run: |
        echo "Deployment completed with status: ${{ job.status }}"
        # Add notification logic here (Slack, email, etc.)

  # Cleanup Job
  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    
    steps:
    - name: Cleanup artifacts
      run: |
        echo "Cleaning up temporary artifacts..."
        # Add any cleanup logic here 