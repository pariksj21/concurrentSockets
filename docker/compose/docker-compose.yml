services:
  # WebSocket Server - Blue deployment
  websocket-blue:
    build:
      context: ../../app
      dockerfile: ../docker/app/Dockerfile
    container_name: websocket-blue
    environment:
      - NODE_ENV=production
      - PORT=3001
      - HOST=0.0.0.0
      - MAX_CONNECTIONS=5000
      - HEARTBEAT_INTERVAL=30000
      - CONNECTION_TIMEOUT=300000
      - LOG_LEVEL=info
    volumes:
      - ../../app/logs:/app/logs
      - ../../app/src/public:/app/public:ro
    networks:
      - websocket-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    labels:
      - "traefik.enable=${BLUE_ENABLED:-true}"
      # Main HTTP router with higher priority when enabled
      - "traefik.http.routers.websocket-blue.rule=Host(`localhost`)"
      - "traefik.http.routers.websocket-blue.entrypoints=web"
      - "traefik.http.routers.websocket-blue.service=websocket-blue"
      - "traefik.http.routers.websocket-blue.priority=100"
      # WebSocket router with highest priority
      - "traefik.http.routers.websocket-blue-ws.rule=Host(`localhost`) && PathPrefix(`/ws/`)"
      - "traefik.http.routers.websocket-blue-ws.entrypoints=web"
      - "traefik.http.routers.websocket-blue-ws.service=websocket-blue"
      - "traefik.http.routers.websocket-blue-ws.priority=200"
      # Health check router
      - "traefik.http.routers.websocket-blue-health.rule=Host(`localhost`) && Path(`/health`)"
      - "traefik.http.routers.websocket-blue-health.entrypoints=web"
      - "traefik.http.routers.websocket-blue-health.service=websocket-blue"
      - "traefik.http.routers.websocket-blue-health.priority=150"
      # Metrics router
      - "traefik.http.routers.websocket-blue-metrics.rule=Host(`localhost`) && Path(`/metrics`)"
      - "traefik.http.routers.websocket-blue-metrics.entrypoints=web"
      - "traefik.http.routers.websocket-blue-metrics.service=websocket-blue"
      - "traefik.http.routers.websocket-blue-metrics.priority=150"
      # Service definition
      - "traefik.http.services.websocket-blue.loadbalancer.server.port=3001"
      - "traefik.http.services.websocket-blue.loadbalancer.healthcheck.path=/health"
      - "traefik.http.services.websocket-blue.loadbalancer.healthcheck.interval=30s"
      - "traefik.http.services.websocket-blue.loadbalancer.healthcheck.timeout=5s"

  # WebSocket Server - Green deployment
  websocket-green:
    build:
      context: ../../app
      dockerfile: ../docker/app/Dockerfile
    container_name: websocket-green
    environment:
      - NODE_ENV=production
      - PORT=3001
      - HOST=0.0.0.0
      - MAX_CONNECTIONS=5000
      - HEARTBEAT_INTERVAL=30000
      - CONNECTION_TIMEOUT=300000
      - LOG_LEVEL=info
    volumes:
      - ../../app/logs:/app/logs
      - ../../app/src/public:/app/public:ro
    networks:
      - websocket-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    profiles:
      - green
    labels:
      - "traefik.enable=${GREEN_ENABLED:-false}"
      # Main HTTP router with higher priority when enabled
      - "traefik.http.routers.websocket-green.rule=Host(`localhost`)"
      - "traefik.http.routers.websocket-green.entrypoints=web"
      - "traefik.http.routers.websocket-green.service=websocket-green"
      - "traefik.http.routers.websocket-green.priority=110"
      # WebSocket router with highest priority (higher than blue when enabled)
      - "traefik.http.routers.websocket-green-ws.rule=Host(`localhost`) && PathPrefix(`/ws/`)"
      - "traefik.http.routers.websocket-green-ws.entrypoints=web"
      - "traefik.http.routers.websocket-green-ws.service=websocket-green"
      - "traefik.http.routers.websocket-green-ws.priority=210"
      # Health check router
      - "traefik.http.routers.websocket-green-health.rule=Host(`localhost`) && Path(`/health`)"
      - "traefik.http.routers.websocket-green-health.entrypoints=web"
      - "traefik.http.routers.websocket-green-health.service=websocket-green"
      - "traefik.http.routers.websocket-green-health.priority=160"
      # Metrics router
      - "traefik.http.routers.websocket-green-metrics.rule=Host(`localhost`) && Path(`/metrics`)"
      - "traefik.http.routers.websocket-green-metrics.entrypoints=web"
      - "traefik.http.routers.websocket-green-metrics.service=websocket-green"
      - "traefik.http.routers.websocket-green-metrics.priority=160"
      # Service definition
      - "traefik.http.services.websocket-green.loadbalancer.server.port=3001"
      - "traefik.http.services.websocket-green.loadbalancer.healthcheck.path=/health"
      - "traefik.http.services.websocket-green.loadbalancer.healthcheck.interval=30s"
      - "traefik.http.services.websocket-green.loadbalancer.healthcheck.timeout=5s"

  # Traefik Load Balancer
  traefik:
    image: traefik:v3.0
    container_name: traefik-lb
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - ../traefik/traefik.yml:/etc/traefik/traefik.yml:ro
      - ../traefik/dynamic.yml:/etc/traefik/dynamic.yml:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - websocket-blue
    networks:
      - websocket-network
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.traefik.entrypoints=web"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.middlewares.traefik-auth.basicauth.users=admin:$$2y$$10$$8YgzOWTl5LN1nOxIgvzpyOOYBYZVNjWUMJjdUG4bxDyEJrZrZvSXW"

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ../monitoring/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    networks:
      - websocket-network
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ../monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ../monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    depends_on:
      - prometheus
    networks:
      - websocket-network
    restart: unless-stopped

  # Redis for session management, caching and reconnection support
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    networks:
      - websocket-network
    restart: unless-stopped

volumes:
  prometheus_data:
  grafana_data:
  redis_data:

networks:
  websocket-network:
    driver: bridge